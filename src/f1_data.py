import requests
import json
from datetime import datetime


class F1DataCollector:
    def __init__(self):
        self.base_url = "https://api.openf1.org/v1"

    def get_current_drivers(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–∏–ª–æ—Ç–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞"""
        try:
            url = f"{self.base_url}/drivers"
            response = requests.get(url)
            response.raise_for_status()

            drivers = response.json()

            print("=== –ü–ò–õ–û–¢–´ –§–û–†–ú–£–õ–´ 1 ===")
            for driver in drivers[:10]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã—Ö 10
                full_name = f"{driver.get('first_name', '')} {driver.get('last_name', '')}"
                team = driver.get('team_name', 'N/A')
                country = driver.get('country', 'N/A')
                driver_number = driver.get('driver_number', 'N/A')

                print(f"{driver_number}. {full_name} - {team} ({country})")

            return drivers

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return None

    def get_current_sessions(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏—è—Ö"""
        try:
            url = f"{self.base_url}/sessions"
            params = {
                'year': 2024,  # –¢–µ–∫—É—â–∏–π –≥–æ–¥
                'session_key': 'latest'  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è
            }
            response = requests.get(url, params=params)
            response.raise_for_status()

            sessions = response.json()

            print("\n=== –¢–ï–ö–£–©–ò–ï –°–ï–°–°–ò–ò ===")
            for session in sessions[:5]:  # –ü–æ–∫–∞–∂–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Å—Å–∏–π
                session_name = session.get('session_name', 'N/A')
                meeting_name = session.get('meeting_name', 'N/A')
                date_start = session.get('date_start', 'N/A')

                print(f"{session_name} - {meeting_name} ({date_start[:10]})")

            return sessions

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return None

    def get_driver_standings(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–∏–ª–æ—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
            sessions_url = f"{self.base_url}/sessions"
            params = {'session_key': 'latest'}
            sessions_response = requests.get(sessions_url, params=params)
            sessions_response.raise_for_status()

            sessions = sessions_response.json()
            if not sessions:
                print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö")
                return None

            latest_session = sessions[0]
            session_key = latest_session.get('session_key')

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            positions_url = f"{self.base_url}/position"
            params = {'session_key': session_key}
            positions_response = requests.get(positions_url, params=params)
            positions_response.raise_for_status()

            positions = positions_response.json()

            print("\n=== –ü–û–ó–ò–¶–ò–ò –í –ü–û–°–õ–ï–î–ù–ï–ô –°–ï–°–°–ò–ò ===")
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ driver_number –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
            driver_positions = {}
            for position in positions:
                driver_num = position.get('driver_number')
                if driver_num:
                    driver_positions[driver_num] = position.get('position', 'N/A')

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏–ª–æ—Ç–∞—Ö
            drivers_url = f"{self.base_url}/drivers"
            drivers_response = requests.get(drivers_url)
            drivers_response.raise_for_status()
            drivers = drivers_response.json()

            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏–º–µ–Ω–∞–º–∏ –ø–∏–ª–æ—Ç–æ–≤
            for driver_num, position in list(driver_positions.items())[:10]:
                driver_info = next((d for d in drivers if d.get('driver_number') == driver_num), None)
                if driver_info:
                    full_name = f"{driver_info.get('first_name', '')} {driver_info.get('last_name', '')}"
                    print(f"P{position}. {full_name} (#{driver_num})")

            return driver_positions

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return None

    def save_data_to_file(self, data, filename_prefix):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª JSON"""
        if data:
            filename = f"{filename_prefix}_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            return filename
        return None


# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_f1_api():
    collector = F1DataCollector()

    print("üèéÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenF1 API...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏–ª–æ—Ç–∞—Ö
    drivers = collector.get_current_drivers()
    collector.save_data_to_file(drivers, "drivers")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
    sessions = collector.get_current_sessions()
    collector.save_data_to_file(sessions, "sessions")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    standings = collector.get_driver_standings()


if __name__ == "__main__":
    test_f1_api()