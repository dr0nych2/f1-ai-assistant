import json
import os
import re
from sentence_transformers import SentenceTransformer
import numpy as np


class SimpleF1Assistant:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        self.model = SentenceTransformer('all-MiniLM-L6-v2')
        self.knowledge_base = []
        self.drivers_data = []

    def load_f1_data(self, data_files):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ F1"""
        for file_path in data_files:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.drivers_data.extend(data)
                    self._build_knowledge_base(data)

        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.drivers_data)} –ø–∏–ª–æ—Ç–æ–≤")
        print(f"–°–æ–∑–¥–∞–Ω–æ {len(self.knowledge_base)} —Ñ–∞–∫—Ç–æ–≤")

    def _build_knowledge_base(self, data):
        """–°—Ç—Ä–æ–∏–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        for driver in data:
            facts = [
                f"–ü–∏–ª–æ—Ç {driver.get('first_name', '')} {driver.get('last_name', '')}",
                f"–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {driver.get('driver_number', 'N/A')}",
                f"–ö–æ–º–∞–Ω–¥–∞: {driver.get('team_name', 'N/A')}",
                f"–°—Ç—Ä–∞–Ω–∞: {driver.get('country', 'N/A')}"
            ]
            self.knowledge_base.extend([f for f in facts if 'N/A' not in f])

    def find_best_match(self, question):
        """–ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç—ã–º –ø–æ–∏—Å–∫–æ–º"""
        question_lower = question.lower()

        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(word in question_lower for word in ['–∫–æ–º–∞–Ω–¥–∞', 'team', '–∑–∞ –∫–æ–≥–æ']):
            return self._answer_team_question(question)
        elif any(word in question_lower for word in ['–Ω–æ–º–µ—Ä', 'number', 'driver number']):
            return self._answer_number_question(question)
        elif any(word in question_lower for word in ['–ø–∏–ª–æ—Ç', 'driver', '–≤–æ–¥–∏—Ç–µ–ª—å']):
            return self._answer_driver_question(question)
        else:
            return self._semantic_search(question)

    def _answer_team_question(self, question):
        """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–∞–Ω–¥–∞—Ö"""
        for driver in self.drivers_data:
            full_name = f"{driver.get('first_name', '')} {driver.get('last_name', '')}"
            if full_name.lower() in question.lower():
                return f"{full_name} –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∑–∞ –∫–æ–º–∞–Ω–¥—É {driver.get('team_name', 'N/A')}"

        return "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –ø–∏–ª–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É."

    def _answer_number_question(self, question):
        """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–æ–º–µ—Ä–∞—Ö"""
        for driver in self.drivers_data:
            full_name = f"{driver.get('first_name', '')} {driver.get('last_name', '')}"
            if full_name.lower() in question.lower():
                return f"{full_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–º–µ—Ä {driver.get('driver_number', 'N/A')}"

        return "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –ø–∏–ª–æ—Ç–µ."

    def _answer_driver_question(self, question):
        """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏–ª–æ—Ç–∞—Ö –≤ –∫–æ–º–∞–Ω–¥–∞—Ö"""
        for driver in self.drivers_data:
            team = driver.get('team_name', '').lower()
            if team and team in question.lower():
                drivers_in_team = [
                    f"{d.get('first_name', '')} {d.get('last_name', '')}"
                    for d in self.drivers_data
                    if d.get('team_name', '').lower() == team
                ]
                if drivers_in_team:
                    return f"–í –∫–æ–º–∞–Ω–¥–µ {driver.get('team_name')} –≤—ã—Å—Ç—É–ø–∞—é—Ç: {', '.join(drivers_in_team)}"

        return "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."

    def _semantic_search(self, question):
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        if not self.knowledge_base:
            return "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ F1."

        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            question_embedding = self.model.encode([question])
            knowledge_embeddings = self.model.encode(self.knowledge_base)

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
            similarities = np.dot(knowledge_embeddings, question_embedding.T).flatten()
            best_match_idx = np.argmax(similarities)

            best_fact = self.knowledge_base[best_match_idx]
            return f"–ù–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {best_fact}"

        except Exception as e:
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"

    def chat(self):
        """–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        print("\nü§ñ –ü—Ä–æ—Å—Ç–æ–π F1 Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏–ª–æ—Ç–∞—Ö –∏ –∫–æ–º–∞–Ω–¥–∞—Ö (–Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        print("–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        print("- –ó–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã—Å—Ç—É–ø–∞–µ—Ç –ú–∞–∫—Å –§–µ—Ä—Å—Ç–∞–ø–ø–µ–Ω?")
        print("- –ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —É –õ—å—é–∏—Å–∞ –•—ç–º–∏–ª—Ç–æ–Ω–∞?")
        print("- –ö—Ç–æ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∑–∞ Ferrari?")

        while True:
            question = input("\nüßê –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()

            if question.lower() in ['—Å—Ç–æ–ø', 'stop', 'exit', 'quit']:
                print("üèÅ –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ F1!")
                break

            if question:
                answer = self.find_best_match(question)
                print(f"ü§ñ {answer}")
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")


def test_simple_assistant():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    assistant = SimpleF1Assistant()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data_files = [f for f in os.listdir() if f.startswith('drivers_')]
    if data_files:
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ F1...")
        assistant.load_f1_data(data_files[:1])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª

        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_questions = [
            "–ó–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã—Å—Ç—É–ø–∞–µ—Ç –ú–∞–∫—Å –§–µ—Ä—Å—Ç–∞–ø–ø–µ–Ω?",
            "–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —É –õ–∞–Ω–¥–æ –ù–æ—Ä—Ä–∏—Å–∞?",
            "–ö—Ç–æ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∑–∞ Red Bull?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –§–µ—Ä–Ω–∞–Ω–¥–æ –ê–ª–æ–Ω—Å–æ"
        ]

        print("\nüß™ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
        for question in test_questions:
            answer = assistant.find_best_match(question)
            print(f"Q: {question}")
            print(f"A: {answer}\n")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        assistant.chat()
    else:
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö F1! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")


if __name__ == "__main__":
    test_simple_assistant()